// scripts/gen-filament-index.mjs
import { promises as fs } from 'fs';
import path from 'path';
import url from 'url';

const __dirname = path.dirname(url.fileURLToPath(import.meta.url));
const ROOT = path.resolve(__dirname, '..');
const SRC_DIR = path.resolve(ROOT, 'assets', 'js', 'config', 'filamentConfig')
const OUT = path.join(SRC_DIR, 'registry-generated.js');

function parseName(name) {
  const noExt = name.replace(/\.json$/i, '').trim();
  const parts = noExt.split('@BBL');
  if (parts.length < 2) return null;
  const left = parts[0].trim();
  const right = parts[1].trim();

  const firstSpace = left.indexOf(' ');
  if (firstSpace < 0) return null;
  const vendor = left.slice(0, firstSpace).trim();
  const material = left.slice(firstSpace + 1).trim();

  const rightParts = right.split(/\s+/);
  const printer = rightParts[0] || '';
  const nozzle02 = /\b0\.2\s*nozzle\b/i.test(right);
  return { vendor, material, printer, nozzle02 };
}

function jsString(s) {
  // sicher quoten
  return JSON.stringify(s);
}

function resolveFullSettings(fileName, fileMap, visited = new Set()) {
  if (visited.has(fileName)) return {}; // Zyklenschutz
  visited.add(fileName);

  const file = fileMap[fileName];
  if (!file) return {};

  let base = {};
  if (file.inherits) {
    base = resolveFullSettings(file.inherits, fileMap, visited);
  }

  // Kombiniere die Daten: Die Werte im aktuellen File überschreiben die geerbten Werte
  return { ...base, ...file };
}

async function run() {
  const files = await fs.readdir(SRC_DIR);
  const jsons = files.filter(f => f.toLowerCase().endsWith('.json') && f.includes('@BBL'));

  // Alle JSON-Dateien laden und in fileMap speichern
  const fileMap = {};
  for (const file of files.filter(f => f.endsWith('.json'))) {
    const data = JSON.parse(await fs.readFile(path.join(SRC_DIR, file), 'utf8'));
    // Key ist entweder data.name oder Dateiname ohne .json
    fileMap[data.name || file.replace(/\.json$/i, '')] = data;
  }

  const imports = [];
  const items = [];

  jsons.sort().forEach((file, i) => {
    const meta = parseName(file);
    if (!meta) return;
    const varName = `p${i}`;
    imports.push(`import ${varName} from ${jsString('./' + file)};`);

    const fileKey = file.replace(/\.json$/i, '');
    const fullSettings = resolveFullSettings(fileKey, fileMap);
    let vendor = fullSettings.filament_vendor?.[0] || meta.vendor;

    // Vendor-Namen vereinheitlichen
    if (vendor === "Bambu") vendor = "Bambu Lab";

    const settings = resolveFullSettings(fileKey, fileMap);

    items.push(`  { file: ${jsString(file)}, vendor: ${jsString(vendor)}, material: ${jsString(meta.material)}, printer: ${jsString(meta.printer)}, nozzle02: ${meta.nozzle02}, data: ${varName}, settings: ${jsString(settings)} }`);
  });

  const content =
    `// AUTO-GENERATED by scripts/gen-filament-index.mjs – DO NOT EDIT
${imports.join('\n')}

export const PRESET_INDEX = [
${items.join(',\n')}
];
`;

  await fs.writeFile(OUT, content, 'utf8');
  console.log(`wrote ${path.relative(ROOT, OUT)} with ${items.length} presets`);
}

run().catch(e => { console.error(e); process.exit(1); });
